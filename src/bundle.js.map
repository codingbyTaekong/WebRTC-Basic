{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://zoom/./src/server.js","webpack://zoom/external commonjs \"@babel/polyfill\"","webpack://zoom/external commonjs \"@socket.io/cluster-adapter\"","webpack://zoom/external commonjs \"@socket.io/sticky\"","webpack://zoom/external commonjs \"express\"","webpack://zoom/external commonjs \"socket.io\"","webpack://zoom/external commonjs \"wrtc\"","webpack://zoom/external node-commonjs \"http\"","webpack://zoom/external node-commonjs \"process\"","webpack://zoom/webpack/bootstrap","webpack://zoom/webpack/runtime/compat get default export","webpack://zoom/webpack/runtime/define property getters","webpack://zoom/webpack/runtime/hasOwnProperty shorthand","webpack://zoom/webpack/runtime/make namespace object","webpack://zoom/webpack/before-startup","webpack://zoom/webpack/startup","webpack://zoom/webpack/after-startup"],"sourcesContent":["import { createServer } from \"http\"\r\nimport express from \"express\";\r\n// 기본방식\r\n// import  {Socket}  from \"socket.io\";\r\n// admin ui를 사용할 때\r\nimport  {Socket}  from \"socket.io\";\r\nimport wrtc from 'wrtc'\r\nimport { config } from \"process\";\r\n\r\nimport {createAdapter} from '@socket.io/cluster-adapter';\r\nconst { setupWorker } = require(\"@socket.io/sticky\");\r\n\r\nlet port = 3001;\r\n\r\nconst app = express();\r\napp.set('view engine', 'pug');\r\napp.set('views', __dirname + \"/views\");\r\napp.use('/public', express.static(__dirname + \"/public\"))\r\napp.get('/', (req,res)=> res.render('home'))\r\napp.get('/*', (req,res)=> res.redirect('/'))\r\n\r\n\r\n// app.listen(3000, handleListen);\r\n\r\n//http 와 ws 서버를 모두 사용하기 위한 작업\r\nconst httpServer = createServer()\r\nconst io = new Socket(httpServer);\r\nio.adapter(createAdapter());\r\nsetupWorker(io);\r\n\r\nlet roomName = \"bigchoi\"\r\n\r\nfunction publicRooms() {\r\n    // const {sids, rooms} = io.sockets.adapter\r\n    // const socketIds = sids;\r\n    // const rooms = rooms;\r\n    const {\r\n        sockets : {\r\n            adapter : {sids, rooms},\r\n        },\r\n    } = io\r\n    const publicRooms = [];\r\n    rooms.forEach((value, key)=> {\r\n        sids.get(key) === undefined ? publicRooms.push(key) : null\r\n    })\r\n    console.log('sids::::::',sids)\r\n    return publicRooms;\r\n}\r\n\r\nfunction countRoom(roomName) {\r\n    return io.sockets.adapter.rooms.get(roomName)?.size\r\n}\r\n\r\nfunction getListOfSocketsInRoom(roomName) {\r\n    return io.sockets.adapter.rooms.get(roomName)\r\n}\r\n\r\nfunction handleTrackEvent(e, peer) {\r\n    senderStream = e.streams[0];\r\n};\r\n// 서버와 실제로 P2P로 주고받을 RTC objects\r\nconst users = new Map();\r\n// const \r\n// 다른 유저가 접속하면 클라에서 다른 유저의 갯수만큼 RTC커넥션을 만들겠지.\r\n// 그럼 그만큼 offer가 생길거고, 그렇다는건 하나의 클라이언트마다 모든 유저 - 자기자신만큼의 RTC커넥션을 생성한다는 것이고\r\n// 나중에 연결을 끊거나 하기 위해서는\r\n// 내 id마다 (모든 유저 - 자기자신만큼의 RTC커넥션)을 value로 가지고 있어야된다는 말\r\n// 때문에 실제 서버와 1:1로 접속되어 있는 object가 아닌 다른 유저들과의 커넥션을 관리할 object가 하나 더 필요하다는 얘기\r\nconst connectionsExceptMe = new Map();\r\n\r\nconst iceConfig = {\r\n    iceServers : [\r\n        {\r\n            urls : [\r\n                \"stun:stun.l.google.com:19302\",\r\n                \"stun:stun1.l.google.com:19302\",\r\n                \"stun:stun2.l.google.com:19302\",\r\n                \"stun:stun3.l.google.com:19302\",\r\n                \"stun:stun4.l.google.com:19302\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nio.on(\"connection\", socket=> {\r\n    socket.emit('mySocketID', socket.id);\r\n    socket.join('bigchoi');\r\n    socket.on('join_room', async (data)=> {\r\n        try {\r\n            // 새로운 유저가 들어오면 커넥션을 연결하고, \r\n            const newConnection = new wrtc.RTCPeerConnection(iceConfig);\r\n            // user map에 새로 생성한 커넥션을 등록한다.\r\n            users.set(socket.id, {conn : newConnection, nickname : data.nickname});\r\n            // 온트랙 이벤트 등록\r\n            newConnection.ontrack = async (e) => {\r\n                users.get(socket.id).stream = e.streams[0]\r\n                // await newConnection.addTrack()\r\n            }\r\n            // 목적지 설정?\r\n            const desc = new wrtc.RTCSessionDescription(data.sdp);\r\n            // 받은 offer를 setRemoteDescription에 등록한다.(초대장이니까..)\r\n            await newConnection.setRemoteDescription(desc);\r\n            // 그 다음에 해당 커넥션에 answer를 생성 후에\r\n            const answer = await newConnection.createAnswer({\r\n                offerToReceiveAudio: true,\r\n                offerToReceiveVideo: true,\r\n            });\r\n            // 연결된 커넥션에 setLocalDescription(answer) 한다.\r\n            await newConnection.setLocalDescription(answer);\r\n\r\n            // console.log(users.get(socket.id))\r\n            newConnection.addEventListener('connectionstatechange' , (e)=> {\r\n                // console.log(e.connectionState)\r\n                if (newConnection.connectionState === \"connected\") {\r\n                    console.log(\"연결되었습니다!\")\r\n                }\r\n            })\r\n            newConnection.addEventListener('icecandidate', (e)=> {\r\n                // console.log(\"icecandidate이벤트가 발생되었습니다.\")\r\n                if (e.candidate) {\r\n                    socket.emit('returnIce', e.candidate)\r\n                }\r\n            })\r\n\r\n            socket.emit('payload', answer);\r\n\r\n            // socket.to(roomName).emit(\"welcome\", nickname)\r\n            // 내가 아닌 다른 유저들 배열\r\n            const otherUsers = [];\r\n            for(const [key, value] of users ) {\r\n                console.log(socket.id, key)\r\n                if (socket.id !== key) {\r\n                    let otherUser = {\r\n                        id : key,\r\n                        nickname : value.nickname\r\n                    }\r\n                    otherUsers.push(otherUser);\r\n                }\r\n            }\r\n            \r\n            if (otherUsers.length > 0) {\r\n                console.log('다른 유저들',otherUsers.length)\r\n                // 내 자신에게 내가 아닌 다른 유저의 리스트를 보내준다.\r\n                socket.emit('otherUsers', otherUsers);\r\n            }\r\n            try {\r\n                // 내가 아닌 다른 사람들에게 내가 들어왔다고 알려야함.(이미 들어와있는 유저들에게)\r\n                socket.broadcast.to('bigchoi').emit('newClient', {\r\n                    id : socket.id,\r\n                    nickname : data.nickname\r\n                });\r\n            } catch (error) {\r\n                // console.log(\"왜 안 보내지니\")\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    })\r\n\r\n    // 클라이언트와 1:1 연결에서 쓰이는 ice 이벤트\r\n    socket.on('ice', async (ice, roomName)=> {\r\n        try {\r\n            if (users.has(socket.id)) {\r\n                await users.get(socket.id).conn.addIceCandidate(ice)\r\n                console.log(\"iceCandidate를 add했습니다.\")\r\n            }\r\n        } catch (error) {\r\n            // console.log(error)\r\n        }\r\n    })\r\n\r\n\r\n\r\n    // 새로운 유저가 들어오면 아직 새로들어온 유저와 연결이 되어있지 않으니까\r\n    // 다시 연결을 수립해야된다.\r\n    socket.on('otherUserOffer', async (data)=> {\r\n        // return console.log(data)\r\n        // 새로운 offer(내가 아닌 다른 유저)를 받으면 새로운 커넥션을 만들고\r\n        const newConnection = new wrtc.RTCPeerConnection(iceConfig);\r\n        users.get(data.mySocketID).stream.getTracks().forEach(track => {\r\n            newConnection.addTrack(track, users.get(data.mySocketID).stream)\r\n        })\r\n        // 중복체크를 해야된다.\r\n        if (connectionsExceptMe.has(data.mySocketID)) {\r\n            // 만약에 있으면\r\n            const connections = connectionsExceptMe.get(data.mySocketID).connections;\r\n            console.log(connections)\r\n            connections.map(obj => obj.id !== data.id ? connections.push({id : data.id, conn : newConnection}) : null)\r\n        } else {\r\n            // 없으면 conntions 배열에 초기값을 추가한다.\r\n            connectionsExceptMe.set(data.mySocketID, {connections : [{\r\n                id : data.id,\r\n                conn : newConnection\r\n            }]})\r\n        }\r\n        newConnection.addEventListener('icecandidate', (e)=> {\r\n            // 새로운 유저가 입장해서 발생되는 icecandidate이벤트\r\n            if (e.candidate) {\r\n                console.log('새로운 유저가 입장해서 발생되는 icecandidate이벤트 발생!')\r\n                io.to(data.mySocketID).emit('newClientIce', {\r\n                    mySocketID : data.mySocketID,\r\n                    id : data.id,\r\n                    candidate : e.candidate\r\n                })\r\n            }\r\n        })\r\n        newConnection.addEventListener('connectionstatechange' , (e)=> {\r\n            // console.log(e.connectionState)\r\n            if (newConnection.connectionState === \"connected\") {\r\n                console.log(`${data.id}와 연결되었습니다!`)\r\n            }\r\n        })\r\n        // return console.log(connectionsExceptMe.get(data.mySocketID).connections)\r\n        // const desc = await new wrtc.RTCSessionDescription(data.offer);\r\n        // return console.log(data.offer);\r\n        await newConnection.setRemoteDescription(data.offer);\r\n        const answer = await newConnection.createAnswer({\r\n            offerToReceiveAudio: false,\r\n            offerToReceiveVideo: false,\r\n        })\r\n        await newConnection.setLocalDescription(answer);\r\n        console.log(data.mySocketID)\r\n        io.to(data.mySocketID).emit('newClientAnswer', {\r\n            mySocketID : data.mySocketID,\r\n            id : data.id,\r\n            answer : answer\r\n        })\r\n    })\r\n\r\n    socket.on('otherUsersIce', (data)=> {\r\n        const connections = connectionsExceptMe.get(data.mySocketID).connections;\r\n        connections.map(obj => obj.id === data.id ? obj.conn.addIceCandidate(data.candidate) : null)\r\n    })\r\n\r\n    socket.on('disconnecting', ()=> {\r\n        // socket.id 연결 해제 및 map에서 삭제\r\n    })\r\n    socket.on('disconnect', ()=> {\r\n        console.log(`${socket.id}가 나갔습니다.`)\r\n        console.log(users.get(socket.id))\r\n        try {\r\n            if (users.has(socket.id)) {\r\n                users.get(socket.id).conn.close()\r\n                io.to(roomName).emit('outuser', socket.id);\r\n                users.delete(socket.id)\r\n            }\r\n        } catch (error) {\r\n            // console.log(error)\r\n        }\r\n        // socket.id가 속해있는 방에 나간 소식을 전달\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\nconst handleListen = () => console.log(`Listening on http://localhost:${port}`)\r\nhttpServer.listen(port, handleListen);\r\n","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"@socket.io/cluster-adapter\");","module.exports = require(\"@socket.io/sticky\");","module.exports = require(\"express\");","module.exports = require(\"socket.io\");","module.exports = require(\"wrtc\");","module.exports = require(\"http\");","module.exports = require(\"process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\n__webpack_require__(\"@babel/polyfill\");\nvar __webpack_exports__ = __webpack_require__(\"./src/server.js\");\n",""],"names":["createServer","express","Socket","wrtc","config","createAdapter","require","setupWorker","port","app","set","__dirname","use","get","req","res","render","redirect","httpServer","io","adapter","roomName","publicRooms","sockets","sids","rooms","forEach","value","key","undefined","push","console","log","countRoom","size","getListOfSocketsInRoom","handleTrackEvent","e","peer","senderStream","streams","users","Map","connectionsExceptMe","iceConfig","iceServers","urls","on","socket","emit","id","join","data","newConnection","RTCPeerConnection","conn","nickname","ontrack","stream","desc","RTCSessionDescription","sdp","setRemoteDescription","createAnswer","offerToReceiveAudio","offerToReceiveVideo","answer","setLocalDescription","addEventListener","connectionState","candidate","otherUsers","otherUser","length","broadcast","to","error","ice","has","addIceCandidate","mySocketID","getTracks","track","addTrack","connections","map","obj","offer","close","handleListen","listen"],"sourceRoot":""}